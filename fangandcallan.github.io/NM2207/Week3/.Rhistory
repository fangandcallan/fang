setwd("D:/NM2207/Week3")
# import the cat-lovers data from the csv file you downloaded from canvas
cat-lovers <- read.csv('cat-lovers.csv)
# import the cat-lovers data from the csv file you downloaded from canvas
cat_lovers <- read.csv('cat-lovers.csv)
# import the cat-lovers data from the csv file you downloaded from canvas
cat_lovers <- read.csv('cat-lovers.csv')
# Compute the mean of the number of cats: execute this command
mean(cat_lovers$number_of_cats)
# Get more information about the mean() command using ? operator
?mean()
# Convert the variable number_of_cats using as.integer()
as.integer(cat_lovers)
# Convert the variable number_of_cats using as.integer()
as.integer(number_of_cats)
# Compute the mean of the number of cats: execute this command
mean(cat_lovers$number_of_cats)
knitr::include_graphics("C:/Users/zifan/OneDrive/Desktop/子方/2Screenshot_20230212_012523.png")
# Convert the variable number_of_cats using as.integer()
as.integer('number_of_cats')
# Convert the variable number_of_cats using as.integer()
as.integer(mean(cat_lovers$number_of_cats))
# Convert the variable number_of_cats using as.integer()
x <- 'number_of_cats'
as.integer(x)
# Convert the variable number_of_cats using as.integer()
x <- 'number_of_cats'
typeof(x)
# Convert the variable number_of_cats using as.integer()
as.integer('number_of_cats')
# Display the elements of the column number_of_cats
cat_lovers$number_of_cats
# Display the elements of the column number_of_cats after converting it using as.numeric()
as.numeric(cat_lovers$number_of_cats)
# Empty vector
x <- vecotor()
# Empty vector
x <- vector()
# Type of the empty vector
typeof(x)
# Method 1
x<-vector("logical",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-logical(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c(TRUE,FALSE,TRUE,FALSE,TRUE)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
x<-vector("character",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
x<-character(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
x<-c('TRUE','FALSE','TRUE','FALSE','TRUE')
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 1
x<-vector("integer",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-integer(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
x<-c('100','100','100','100','100')
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
x<-c(100,100,100,100,100)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
x<-c(100,100,100,100,10)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
x<-c(100,-100,10650,100,10)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
x<-c(1,2,3,4,5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
x<-c(1l,2l,3l,4l,5l)
x<-c(1L,2L,3L,4L,5L)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 5
x <- 1:5
# Display the contents of x
typeof(x)
# Display the type of x
# Method 4
x<-seq(from=1,to=5,by=0.1)
# Display the contents of x
# Display the type of x
# Method 4
x<-seq(from=1,to=5,by=0.1)
# Display the contents of x
# Display the type of x
typeof(x)
# Method 4
x<-seq(from=1,to=5,by=1)
# Display the contents of x
# Display the type of x
typeof(x)
# Method 1
x <- numeric(0)
typeof (x)
# Method 2
x <- c()
typeof(x)
# Method 2
x <- c(12)
typeof(x)
# Method 3
x <- vector("numeric", length = 0)
typeof(x)
# Create a vector
x <- numeric(0)
typeof(x)
x <- append(x, "pineapple")
typeof(x)
x <- append(x, 6)
typeof(x)
x <- append(x, TRUE)
typeof(x)
x <- append(x, '3')
typeof(x)
x <- as.character(x)
typeof(x)
x <- as.double(x)
typeof(x)
x <- numeric(0)
typeof(x)
x <- as.double(x)
typeof(x)
x <- 1
typeof(x)
x <- 1
typeof(x)
x <- 1
typeof(x)
x <- s
x <- 's'
typeof(x)
x <- as.double(x)
typeof(x)
x <- '1'
typeof(x)
x <- as.double(x)
typeof(x)
# Create a vector
x <- c(1,10,9,8,1,3,5)
# Access one element with index 3
3 <- x[3]
# Create a vector
x <- c(1,10,9,8,1,3,5)
# Access one element with index 3
3 <- x[3]
# Access one element with index 3
element_at_index_3 <- x[3]
# Access one element with index 3
element_at_index_3 <- x[3]
# Access one element with index 3
x3 <- x[3]
# Access elements with consecutive indices, 2 to 4: 2,3,4
x24<- x[2:4]
# Access elements with non-consecutive indices, 1,3,5
x135<- c(1, 3, 5)
# Access elements using logical vector
x[c(TRUE,FALSE,FALSE,TRUE,FALSE,FALSE,TRUE)]
# Access elements using the conditional operator <
xcondi<- x[x < 5]
# Display the length of the vector
print(length(x))
# Display the type of the vector
print(typeof(x))
# Display the structure of the vector
print(str(x))
# Initialise a named list
my_pie = list(type="key lime", diameter=7, is.vegetarian=TRUE)
# display the list
my_pie
# Print the names of the list
element_names <- names(my_list)
# Print the names of the list
element_names <- names(my_pie)
# Retrieve the element named type
type_element <- my_pie[element_names == "vegetarian"]
# Retrieve a truncated list
subset_names <- c("type", "flavor", "size")
truncated_pie <- my_pie[subset_names]
# Retrieve the element named type
type_element <- my_pie$type
print(type_element)
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Catch a glimpse of the data-set: see how the rows are stacked one below another
glimpse(loans_full_schema)
# Selecting numeric variables
loans <- loans_full_schema %>% # <-- pipe operator
select(paid_total, term, interest_rate,
annual_income,paid_late_fees,debt_to_income)
# View the columns stacked one below another
glimpse(loans)
# Selecting categoric variables
loans <- loans_full_schema %>%
select( ) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
