dataset <- datasetInput()
summary(dataset)
})
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
# Custom function for creating and customizing "rock" dataset scatterplots
custom_rock_plot <- function(dataset) {
# Set the plot dimensions
options(repr.plot.width = 8, repr.plot.height = 6)
# Additional scatterplot
output$scatterplot <- renderPlot({
dataset <- datasetInput()
if (input$dataset == "cars") {
plot(dataset$dist, dataset$speed, xlab = "Distance", ylab = "Speed",
main = "Scatterplot for Cars Dataset", pch = 19, cex = 1.5)
} else if (input$dataset == "rock") {
par(mar = c(4, 4, 2, 2))  # Adjust plot margins
custom_rock_plot(dataset)
} else {
plot(dataset, main = "Selected Dataset", pch = 19, cex = 1.5)
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for dataset viewer app
ui <- fluidPage(
titlePanel("Shiny Text"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
numericInput(inputId = "obs",
label = "Number of observations to view:",
value = 10)
),
mainPanel(
verbatimTextOutput("summary"),
tableOutput("view"),
plotOutput("scatterplot")
)
)
)
# Define server logic to summarize and view selected dataset
server <- function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
# Custom function for creating and customizing "rock" dataset scatterplots
custom_rock_plot <- function(dataset) {
# Set the plot dimensions
options(repr.plot.width = 8, repr.plot.height = 6)
# Create and customize the scatterplot
plot(dataset$weight, dataset$hardness, xlab = "Weight", ylab = "Hardness",
main = "Rock Dataset Scatterplot", pch = 19, cex = 1.5)
}
# Additional scatterplot
output$scatterplot <- renderPlot({
dataset <- datasetInput()
if (input$dataset == "cars") {
plot(dataset$dist, dataset$speed, xlab = "Distance", ylab = "Speed",
main = "Scatterplot for Cars Dataset", pch = 19, cex = 1.5)
} else if (input$dataset == "rock") {
par(mar = c(4, 4, 2, 2))  # Adjust plot margins
custom_rock_plot(dataset)
} else {
plot(dataset, main = "Selected Dataset", pch = 19, cex = 1.5)
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for dataset viewer app
ui <- fluidPage(
titlePanel("Shiny Text"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
numericInput(inputId = "obs",
label = "Number of observations to view:",
value = 10)
),
mainPanel(
verbatimTextOutput("summary"),
tableOutput("view"),
plotOutput("scatterplot")
)
)
)
# Define server logic to summarize and view selected dataset
server <- function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
# Custom function for creating and customizing "rock" dataset scatterplots
custom_rock_plot <- function(dataset) {
# Set the plot dimensions
options(repr.plot.width = 8, repr.plot.height = 6)
# Create and customize the scatterplot
plot(dataset$weight, dataset$hardness, xlab = "Weight", ylab = "Hardness",
main = "Rock Dataset Scatterplot", pch = 19, cex = 1.5, xlim = c(0, max(dataset$weight))))
library(shiny)
# Define UI for dataset viewer app
ui <- fluidPage(
titlePanel("Shiny Text"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
numericInput(inputId = "obs",
label = "Number of observations to view:",
value = 10)
),
mainPanel(
verbatimTextOutput("summary"),
tableOutput("view"),
plotOutput("scatterplot")
)
)
)
# Define server logic to summarize and view selected dataset
server <- function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
# Custom function for creating and customizing "rock" dataset scatterplots
custom_rock_plot <- function(dataset) {
# Set the plot dimensions
options(repr.plot.width = 8, repr.plot.height = 6)
# Create and customize the scatterplot
plot(dataset$weight, dataset$hardness, xlab = "Weight", ylab = "Hardness",
main = "Rock Dataset Scatterplot", pch = 19, cex = 1.5, xlim = c(0, max(dataset$weight))
}
library(shiny)
# Define UI for dataset viewer app
ui <- fluidPage(
titlePanel("Shiny Text"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
numericInput(inputId = "obs",
label = "Number of observations to view:",
value = 10)
),
mainPanel(
verbatimTextOutput("summary"),
tableOutput("view"),
plotOutput("scatterplot")
)
)
)
# Define server logic to summarize and view selected dataset
server <- function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
# Custom function for creating and customizing "rock" dataset scatterplots
custom_rock_plot <- function(dataset) {
# Set the plot dimensions
options(repr.plot.width = 8, repr.plot.height = 6)
# Create and customize the scatterplot
plot(dataset$weight, dataset$hardness, xlab = "Weight", ylab = "Hardness",
main = "Rock Dataset Scatterplot", pch = 19, cex = 1.5, xlim = c(0, max(dataset$weight))
# Additional scatterplot
output$scatterplot <- renderPlot({
library(shiny)
# Define UI for dataset viewer app
ui <- fluidPage(
titlePanel("Shiny Text"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
numericInput(inputId = "obs",
label = "Number of observations to view:",
value = 10)
),
mainPanel(
verbatimTextOutput("summary"),
tableOutput("view"),
plotOutput("scatterplot")
)
)
)
# Define server logic to summarize and view selected dataset
server <- function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
# Custom function for creating and customizing "rock" dataset scatterplots
custom_rock_plot <- function(dataset) {
# Set the plot dimensions
options(repr.plot.width = 8, repr.plot.height = 6)
# Create and customize the scatterplot
plot(dataset$weight, dataset$hardness,
xlab = "Weight", ylab = "Hardness",
main = "Rock Dataset Scatterplot",
pch = 19, cex = 1.5,
xlim = c(0, max(dataset$weight)))  # Specify xlim based on your data
}
# Additional scatterplot
output$scatterplot <- renderPlot({
dataset <- datasetInput()
if (input$dataset == "cars") {
plot(dataset$dist, dataset$speed, xlab = "Distance", ylab = "Speed",
main = "Scatterplot for Cars Dataset", pch = 19, cex = 1.5)
} else if (input$dataset == "rock") {
par(mar = c(4, 4, 2, 2))  # Adjust plot margins
custom_rock_plot(dataset)
} else {
plot(dataset, main = "Selected Dataset", pch = 19, cex = 1.5)
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for dataset viewer app
ui <- fluidPage(
titlePanel("Shiny Text"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
numericInput(inputId = "obs",
label = "Number of observations to view:",
value = 10)
),
mainPanel(
verbatimTextOutput("summary"),
tableOutput("view"),
plotOutput("scatterplot")
)
)
)
# Define server logic to summarize and view selected dataset
server <- function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
# Additional scatterplot
output$scatterplot <- renderPlot({
dataset <- datasetInput()
if (input$dataset == "cars") {
plot(dataset$dist, dataset$speed, xlab = "Distance", ylab = "Speed",
main = "Scatterplot for Cars Dataset", pch = 19, cex = 1.5)
} else if (input$dataset == "rock") {
par(mar = c(4, 4, 2, 2))  # Adjust plot margins
custom_rock_plot(dataset)
} else {
plot(dataset, main = "Selected Dataset", pch = 19, cex = 1.5)
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for dataset viewer app
ui <- fluidPage(
titlePanel("Shiny Text"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
numericInput(inputId = "obs",
label = "Number of observations to view:",
value = 10)
),
mainPanel(
verbatimTextOutput("summary"),
tableOutput("view"),
plotOutput("scatterplot")
)
)
)
# Define server logic to summarize and view selected dataset
server <- function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
# Additional scatterplot
output$scatterplot <- renderPlot({
dataset <- datasetInput()
if (input$dataset == "cars") {
plot(dataset$dist, dataset$speed, xlab = "Distance", ylab = "Speed",
main = "Scatterplot for Cars Dataset", pch = 19, cex = 1.5)
} else {
plot(dataset, main = "Selected Dataset", pch = 19, cex = 1.5)
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for dataset viewer app
ui <- fluidPage(
titlePanel("Shiny Text"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
numericInput(inputId = "obs",
label = "Number of observations to view:",
value = 10)
),
mainPanel(
verbatimTextOutput("summary"),
tableOutput("view"),
plotOutput("scatterplot")
)
)
)
# Define server logic to summarize and view selected dataset
server <- function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
# Additional scatterplot
output$scatterplot <- renderPlot({
dataset <- datasetInput()
if (input$dataset == "cars") {
plot(dataset$dist, dataset$speed, xlab = "Distance", ylab = "Speed",
main = "Scatterplot for Cars Dataset", pch = 19, cex = 1.5)
} else {
plot(dataset, main = "Selected Dataset", pch = 19, cex = 1.5)
}
})
}
shinyApp(ui = ui, server = server)
?renderPlot
library(shiny)
# Define UI for dataset viewer app
ui <- fluidPage(
titlePanel("Shiny Text"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
numericInput(inputId = "obs",
label = "Number of observations to view:",
value = 10)
),
mainPanel(
verbatimTextOutput("summary"),
tableOutput("view"),
plotOutput("scatterplot")
)
)
)
# Define server logic to summarize and view selected dataset
server <- function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
# Additional scatterplot
output$scatterplot <- renderPlot({
dataset <- datasetInput()
if (input$dataset == "cars") {
plot(dataset$dist, dataset$speed, xlab = "Distance", ylab = "Speed",
main = "Scatterplot for Cars Dataset", pch = 19, cex = 1.5)
} else {
plot(dataset, main = "Selected Dataset", pch = 19, cex = 1.5)
}
}, height = 200)
}
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for dataset viewer app
ui <- fluidPage(
titlePanel("Shiny Text"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
numericInput(inputId = "obs",
label = "Number of observations to view:",
value = 10)
),
mainPanel(
verbatimTextOutput("summary"),
tableOutput("view"),
plotOutput("scatterplot")
)
)
)
# Define server logic to summarize and view selected dataset
server <- function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
# Additional scatterplot
output$scatterplot <- renderPlot({
dataset <- datasetInput()
if (input$dataset == "cars") {
plot(dataset$dist, dataset$speed, xlab = "Distance", ylab = "Speed",
main = "Scatterplot for Cars Dataset", pch = 19, cex = 1.5)
} else {
plot(dataset, main = "Selected Dataset", pch = 19, cex = 1.5)
}
}, height = 600)
}
shinyApp(ui = ui, server = server)
