{
  "hash": "661bba195e1c37ae21345a2b2e9d3676",
  "result": {
    "markdown": "---\ntitle: \"Week-3: Code-along\"\nauthor: \"Insert your name here\"\ndate: \"2023-10-16\"\noutput:\n  html_document:\n  df_print: paged\npdf_document: default\n---\n\n  \n\n\n\n# I. Code to edit and execute\n\n**To be submitted on canvas before attending the tutorial**\n\n\n### Loading packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load package tidyverse\nlibrary(tidyverse)\n```\n:::\n\n\n### Assigning values to variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example a.: execute this example\nx <- 'A'\nx\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complete the code for Example b and execute it\nx <- 'B'\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complete the code for Example c and execute it\nx <- 'C'\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complete the code for Example d and execute it\nx <- 'D'\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complete the code for Example e and execute it\nx <- 'E'\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complete the code for Example f and execute it\nX <- 'F'\n```\n:::\n\n\n### Checking the type of variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example a.: execute this example\nx <- 'A'\ntypeof(x)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complete the code for Example b and execute it\nx <- 'B'\ntypeof(x)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complete the code for Example c and execute it\nx <- 'C'\ntypeof(x)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complete the code for Example d and execute it\nx <- 'D'\ntypeof(x)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complete the code for Example e and execute it\nx <- 'E'\ntypeof(x)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complete the code for Example f and execute it\nx <- 'F'\ntypeof(x)\n```\n:::\n\n\n### Need for data types\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# import the cat-lovers data from the csv file you downloaded from canvas\ncat_lovers <- read.csv('cat-lovers.csv')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute the mean of the number of cats: execute this command\nmean(cat_lovers$number_of_cats)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get more information about the mean() command using ? operator\n?mean()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert the variable number_of_cats using as.integer()\nas.integer('number_of_cats')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Display the elements of the column number_of_cats \ncat_lovers$number_of_cats\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Display the elements of the column number_of_cats after converting it using as.numeric()\nas.numeric(cat_lovers$number_of_cats)\n```\n:::\n\n\n### Create an empty vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Empty vector\nx <- vector()\n# Type of the empty vector\ntypeof(x)\n```\n:::\n\n\n### Create vectors of type logical\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 1\nx<-vector(\"logical\",length=5)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 2\nx<-logical(5)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 3\nx<-c(TRUE,FALSE,TRUE,FALSE,TRUE)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n:::\n\n\n### Create vectors of type character\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx<-vector(\"character\",length=5)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx<-character(5)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx<-c('TRUE','FALSE','TRUE','FALSE','TRUE')\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n:::\n\n\n### Create vectors of type integer\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 1\nx<-vector(\"integer\",length=5)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 2\nx<-integer(5)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx<-c(1L,2L,3L,4L,5L)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 4\nx<-seq(from=1,to=5,by=1)\n# Display the contents of x\n\n# Display the type of x\ntypeof(x)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 5\nx <- 1:5\n# Display the contents of x\ntypeof(x)\n# Display the type of x\n```\n:::\n\n\n### Create vectors of type double\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 1\n\nx <- numeric(0)\ntypeof (x)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 2\n\nx <- c(12)\ntypeof(x)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 3\n\nx <- vector(\"numeric\", length = 0)\ntypeof(x)\n```\n:::\n\n\n### Implicit coercion\n\n#### Example 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector\nx <- numeric(0)\ntypeof(x)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- append(x, \"pineapple\")\ntypeof(x)\n```\n:::\n\n\n#### Example 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- numeric(0)\ntypeof(x)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- append(x, 6)\ntypeof(x)\n```\n:::\n\n\n#### Example 3\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- numeric(0)\ntypeof(x)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- append(x, TRUE)\ntypeof(x)\n```\n:::\n\n\n\n#### Example 4\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- numeric(0)\ntypeof(x)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- append(x, '3')\ntypeof(x)\n```\n:::\n\n\n### Explicit coercion\n\n#### Example 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- numeric(0)\ntypeof(x)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- as.character(x)\ntypeof(x)\n```\n:::\n\n\n#### Example 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- '1'\ntypeof(x)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- as.double(x)\ntypeof(x)\n```\n:::\n\n\n### Accessing elements of the vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector\nx <- c(1,10,9,8,1,3,5)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Access one element with index 3\nx3 <- x[3]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Access elements with consecutive indices, 2 to 4: 2,3,4\nx24<- x[2:4]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Access elements with non-consecutive indices, 1,3,5\nx135<- c(1, 3, 5)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Access elements using logical vector\nx[c(TRUE,FALSE,FALSE,TRUE,FALSE,FALSE,TRUE)]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Access elements using the conditional operator <\nxcondi<- x[x < 5]\n```\n:::\n\n\n### Examining vectors\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Display the length of the vector\nprint(length(x))\n# Display the type of the vector\nprint(typeof(x))\n# Display the structure of the vector\nprint(str(x))\n```\n:::\n\n\n### Lists\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Initialise a named list\nmy_pie = list(type=\"key lime\", diameter=7, is.vegetarian=TRUE)\n# display the list\nmy_pie\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Print the names of the list\nelement_names <- names(my_pie)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Retrieve the element named type\ntype_element <- my_pie[element_names == \"vegetarian\"]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Retrieve a truncated list\nsubset_names <- c(\"type\", \"flavor\", \"size\")\ntruncated_pie <- my_pie[subset_names]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Retrieve the element named type\ntype_element <- my_pie$type\nprint(type_element)\n```\n:::\n\n\n#### Exploring data-sets\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install package\ninstall.packages(\"openintro\")\n# Load the package\nlibrary(openintro)\n# Load package\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Catch a glimpse of the data-set: see how the rows are stacked one below another\nglimpse(loans_full_schema)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Selecting numeric variables\nloans <- loans_full_schema %>% # <-- pipe operator\n  select(paid_total, term, interest_rate,\n         annual_income,paid_late_fees,debt_to_income)\n# View the columns stacked one below another\nglimpse(loans)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Selecting categoric variables\nloans <- loans_full_schema %>% \n  select( ) # type the chosen columns as in the lecture slide\n# View the columns stacked one below another\nglimpse(loans)\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}