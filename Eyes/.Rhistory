titlePanel("This is the choice between the living and the dead"),
# Placed on top of the video to indicate what's it about.
tags$iframe(
id = "videoPlayer",
src = "https://www.youtube.com/embed/Rrb5ElwwSh0?autoplay=1",
width = "640",
height = "360"
), # Intro to the eyes and the aim: shut the eyes
sidebarLayout(
sidebarPanel(
h3("Select Eyes:"),
radioButtons("eyeColor", "",
choices = c("Brown eyes", "Blue eyes", "Green eyes")
),
), # Choosing eyes to interact with
mainPanel(
h3("Last Statement:"),
textOutput("lastStatement"),
br(), # Display last statement to inform user of making choices
actionButton("closeEyes", "Close their eyes"),
actionButton("burnBody", "Condemn their body by burning them"),
textOutput("choiceMessage")  # Display the choice message
) # Two actional ways to shut the eyes
)
)
# Shiny Server
server <- function(input, output, session) {
# Read data from CSV
merged_data <- read.csv("merged_data.csv")
#Added this but no use
shinyjs::runjs("document.getElementById('videoPlayer').contentWindow.postMessage({event: 'command', func: 'mute', args: []}, '*');");
# Function to change video based on user interaction
updateVideo <- function(session, newSrc) {
session$sendCustomMessage(type = "updateVideo", message = list(src = newSrc))
}
# Render last statement based on selected eye color
output$lastStatement <- renderText({
eye_color <- switch(input$eyeColor,
"Brown eyes" = "Brown",
"Blue eyes" = "Blue",
"Green eyes" = "Green"
) # Linking variables based on eye color
if (eye_color == "") {
last_statements <- merged_data$Last.Statement[is.na(merged_data$EyeColor)]
} else {
last_statements <- merged_data$Last.Statement[merged_data$EyeColor == eye_color]
} # Linking last statements to eye color respectively
if (length(last_statements) == 0) {
return("This person has left no words.")
} # In case there isn't a last word
random_statement <- sample(last_statements, 1)
random_statement
}) # Display a random statement based on the chosen eye
# Initialize counters for both buttons
closeEyesCount <- reactiveVal(0)
burnBodyCount <- reactiveVal(0)
# Observe events for closing eyes button
observeEvent(input$closeEyes, {
# Increment the click count for "Close their eyes" button
closeEyesCount(closeEyesCount() + 1)
if (closeEyesCount() == 3 | closeEyesCount() == 5) {
videoUrlcloseeyes <- switch(
closeEyesCount(),
"3" = "https://www.youtube.com/embed/ngcgrYjuf5U?autoplay=1",
"5" = "https://www.youtube.com/embed/ScGNAsh9DMg?autoplay=1"
)
shinyjs::runjs(paste0("document.getElementById('videoPlayer').src = '", videoUrlcloseeyes, "';"))
}
})
# Play the determined video
# Observe events for burning body button
observeEvent(input$burnBody, {
# Increment the click count for "Condemn their body by burning them" button
burnBodyCount(burnBodyCount() + 1)
if (burnBodyCount() == 3 | burnBodyCount() == 5) {
videoUrlburnbody <- switch(
burnBodyCount(),
"3" = "https://www.youtube.com/embed/iBvlNIYJkAo?autoplay=1",
"5" = "https://www.youtube.com/embed/RfPudGbjwzTE?autoplay=1"
)
shinyjs::runjs(paste0("document.getElementById('videoPlayer').src = '", videoUrlburnbody, "';"))
}
})
})
library(shiny)
library(shinyjs)
# Shiny UI
ui <- fluidPage(
shinyjs::useShinyjs(),
titlePanel("This is the choice between the living and the dead"),
# Placed on top of the video to indicate what's it about.
tags$iframe(
id = "videoPlayer",
src = "https://www.youtube.com/embed/Rrb5ElwwSh0?autoplay=1",
width = "640",
height = "360"
), # Intro to the eyes and the aim: shut the eyes
sidebarLayout(
sidebarPanel(
h3("Select Eyes:"),
radioButtons("eyeColor", "",
choices = c("Brown eyes", "Blue eyes", "Green eyes")
),
), # Choosing eyes to interact with
mainPanel(
h3("Last Statement:"),
textOutput("lastStatement"),
br(), # Display last statement to inform user of making choices
actionButton("closeEyes", "Close their eyes"),
actionButton("burnBody", "Condemn their body by burning them"),
textOutput("choiceMessage")  # Display the choice message
) # Two actional ways to shut the eyes
)
)
# Shiny Server
server <- function(input, output, session) {
# Read data from CSV
merged_data <- read.csv("merged_data.csv")
#Added this but no use
shinyjs::runjs("document.getElementById('videoPlayer').contentWindow.postMessage({event: 'command', func: 'mute', args: []}, '*');");
# Function to change video based on user interaction
updateVideo <- function(session, newSrc) {
session$sendCustomMessage(type = "updateVideo", message = list(src = newSrc))
}
# Render last statement based on selected eye color
output$lastStatement <- renderText({
eye_color <- switch(input$eyeColor,
"Brown eyes" = "Brown",
"Blue eyes" = "Blue",
"Green eyes" = "Green"
) # Linking variables based on eye color
if (eye_color == "") {
last_statements <- merged_data$Last.Statement[is.na(merged_data$EyeColor)]
} else {
last_statements <- merged_data$Last.Statement[merged_data$EyeColor == eye_color]
} # Linking last statements to eye color respectively
if (length(last_statements) == 0) {
return("This person has left no words.")
} # In case there isn't a last word
random_statement <- sample(last_statements, 1)
random_statement
}) # Display a random statement based on the chosen eye
# Initialize counters for both buttons
closeEyesCount <- reactiveVal(0)
burnBodyCount <- reactiveVal(0)
# Observe events for closing eyes button
observeEvent(input$closeEyes, {
# Increment the click count for "Close their eyes" button
closeEyesCount(closeEyesCount() + 1)
if (closeEyesCount() == 3 | closeEyesCount() == 5) {
videoUrlcloseeyes <- switch(
closeEyesCount(),
"3" = "https://www.youtube.com/embed/ngcgrYjuf5U?autoplay=1",
"5" = "https://www.youtube.com/embed/ScGNAsh9DMg?autoplay=1"
)
shinyjs::runjs(paste0("document.getElementById('videoPlayer').src = '", videoUrlcloseeyes, "';"))
}
})
# Play the determined video
# Observe events for burning body button
observeEvent(input$burnBody, {
# Increment the click count for "Condemn their body by burning them" button
burnBodyCount(burnBodyCount() + 1)
if (burnBodyCount() == 3 | burnBodyCount() == 5) {
videoUrlburnbody <- switch(
burnBodyCount(),
"3" = "https://www.youtube.com/embed/iBvlNIYJkAo?autoplay=1",
"5" = "https://www.youtube.com/embed/RfPudGbjwzTE?autoplay=1"
)
shinyjs::runjs(paste0("document.getElementById('videoPlayer').src = '", videoUrlburnbody, "';"))
}
})
})
library(shiny)
library(shinyjs)
# Shiny UI
ui <- fluidPage(
shinyjs::useShinyjs(),
titlePanel("This is the choice between the living and the dead"),
tags$iframe(
id = "videoPlayer",
src = "https://www.youtube.com/embed/Rrb5ElwwSh0?autoplay=1",
width = "640",
height = "360"
),
sidebarLayout(
sidebarPanel(
h3("Select Eyes:"),
radioButtons("eyeColor", "",
choices = c("Brown eyes", "Blue eyes", "Green eyes")
),
),
mainPanel(
h3("Last Statement:"),
textOutput("lastStatement"),
br(),
actionButton("closeEyes", "Close their eyes"),
actionButton("burnBody", "Condemn their body by burning them"),
textOutput("choiceMessage")
)
)
)
# Shiny Server
server <- function(input, output, session) {
merged_data <- read.csv("merged_data.csv")
output$lastStatement <- renderText({
eye_color <- switch(input$eyeColor,
"Brown eyes" = "Brown",
"Blue eyes" = "Blue",
"Green eyes" = "Green"
)
if (eye_color == "") {
last_statements <- merged_data$Last.Statement[is.na(merged_data$EyeColor)]
} else {
last_statements <- merged_data$Last.Statement[merged_data$EyeColor == eye_color]
}
if (length(last_statements) == 0) {
return("This person has left no words.")
}
random_statement <- sample(last_statements, 1)
random_statement
})
closeEyesCount <- reactiveVal(0)
burnBodyCount <- reactiveVal(0)
currentVideo <- reactiveVal("https://www.youtube.com/embed/Rrb5ElwwSh0?autoplay=1")
observe({
# Attempt to trigger autoplay for the initial video
shinyjs::runjs("document.getElementById('videoPlayer').contentWindow.postMessage({event: 'command', func: 'mute', args: []}, '*');");
})
observeEvent(input$closeEyes, {
closeEyesCount(closeEyesCount() + 1)
if (closeEyesCount() == 3 | closeEyesCount() == 5) {
videoUrlcloseeyes <- switch(
closeEyesCount(),
"3" = "https://www.youtube.com/embed/ngcgrYjuf5U?autoplay=1",
"5" = "https://www.youtube.com/embed/ScGNAsh9DMg?autoplay=1"
)
currentVideo(videoUrlcloseeyes)
}
})
observeEvent(input$burnBody, {
burnBodyCount(burnBodyCount() + 1)
if (burnBodyCount() == 3 | burnBodyCount() == 5) {
videoUrlburnbody <- switch(
burnBodyCount(),
"3" = "https://www.youtube.com/embed/iBvlNIYJkAo?autoplay=1",
"5" = "https://www.youtube.com/embed/RfPudGbjwzTE?autoplay=1"
)
currentVideo(videoUrlburnbody)
}
})
observe({
shinyjs::runjs(paste0("document.getElementById('videoPlayer').src = '", currentVideo(), "';"))
})
choiceMessage <- reactive({
if (closeEyesCount() >= 5 | burnBodyCount() >= 5) {
return("You've made a choice. Live on with hope.")
} else {
return(NULL)
}
})
output$choiceMessage <- renderText({
choiceMessage()
})
onStop(function() {
if (!is.null(choiceMessage())) {
print(choiceMessage())
}
})
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
# Shiny UI
ui <- fluidPage(
shinyjs::useShinyjs(),
titlePanel("This is the choice between the living and the dead"),
tags$iframe(
id = "videoPlayer",
src = "https://www.youtube.com/embed/Rrb5ElwwSh0?autoplay=1",
width = "640",
height = "360"
),
sidebarLayout(
sidebarPanel(
h3("Select Eyes:"),
radioButtons("eyeColor", "",
choices = c("Brown eyes", "Blue eyes", "Green eyes")
),
),
mainPanel(
h3("Last Statement:"),
textOutput("lastStatement"),
br(),
actionButton("closeEyes", "Close their eyes"),
actionButton("burnBody", "Condemn their body by burning them"),
textOutput("choiceMessage")
)
)
)
# Shiny Server
server <- function(input, output, session) {
merged_data <- read.csv("merged_data.csv")
output$lastStatement <- renderText({
eye_color <- switch(input$eyeColor,
"Brown eyes" = "Brown",
"Blue eyes" = "Blue",
"Green eyes" = "Green"
)
if (eye_color == "") {
last_statements <- merged_data$Last.Statement[is.na(merged_data$EyeColor)]
} else {
last_statements <- merged_data$Last.Statement[merged_data$EyeColor == eye_color]
}
if (length(last_statements) == 0) {
return("This person has left no words.")
}
random_statement <- sample(last_statements, 1)
random_statement
})
closeEyesCount <- reactiveVal(0)
burnBodyCount <- reactiveVal(0)
currentVideo <- reactiveVal("https://www.youtube.com/embed/Rrb5ElwwSh0?autoplay=1")
observe({
# Attempt to trigger autoplay for the initial video
shinyjs::runjs("document.getElementById('videoPlayer').contentWindow.postMessage({event: 'command', func: 'mute', args: []}, '*');");
})
observeEvent(input$closeEyes, {
closeEyesCount(closeEyesCount() + 1)
if (closeEyesCount() == 3 | closeEyesCount() == 5) {
videoUrlcloseeyes <- switch(
closeEyesCount(),
"3" = "https://www.youtube.com/embed/ngcgrYjuf5U?autoplay=1",
"5" = "https://www.youtube.com/embed/ScGNAsh9DMg?autoplay=1"
)
currentVideo(videoUrlcloseeyes)
}
})
observeEvent(input$burnBody, {
burnBodyCount(burnBodyCount() + 1)
if (burnBodyCount() == 3 | burnBodyCount() == 5) {
videoUrlburnbody <- switch(
burnBodyCount(),
"3" = "https://www.youtube.com/embed/iBvlNIYJkAo?autoplay=1",
"5" = "https://www.youtube.com/embed/RfPudGbjwzTE?autoplay=1"
)
currentVideo(videoUrlburnbody)
}
})
observe({
shinyjs::runjs(paste0("document.getElementById('videoPlayer').src = '", currentVideo(), "';"))
})
choiceMessage <- reactive({
if (closeEyesCount() >= 5 | burnBodyCount() >= 5) {
return("You've made a choice. Live on with hope.")
} else {
return(NULL)
}
})
output$choiceMessage <- renderText({
choiceMessage()
})
onStop(function() {
if (!is.null(choiceMessage())) {
print(choiceMessage())
}
})
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
# Shiny UI
ui <- fluidPage(
shinyjs::useShinyjs(),
titlePanel("This is the choice between the living and the dead"),
tags$iframe(
id = "videoPlayer",
src = "https://www.youtube.com/embed/Rrb5ElwwSh0?autoplay=1",
width = "640",
height = "360"
),
sidebarLayout(
sidebarPanel(
h3("Select Eyes:"),
radioButtons("eyeColor", "",
choices = c("Brown eyes", "Blue eyes", "Green eyes")
),
),
mainPanel(
h3("Last Statement:"),
textOutput("lastStatement"),
br(),
actionButton("closeEyes", "Close their eyes"),
actionButton("burnBody", "Condemn their body by burning them"),
textOutput("choiceMessage")
)
)
)
# Shiny Server
server <- function(input, output, session) {
merged_data <- read.csv("merged_data.csv")
output$lastStatement <- renderText({
eye_color <- switch(input$eyeColor,
"Brown eyes" = "Brown",
"Blue eyes" = "Blue",
"Green eyes" = "Green"
)
if (eye_color == "") {
last_statements <- merged_data$Last.Statement[is.na(merged_data$EyeColor)]
} else {
last_statements <- merged_data$Last.Statement[merged_data$EyeColor == eye_color]
}
if (length(last_statements) == 0) {
return("This person has left no words.")
}
random_statement <- sample(last_statements, 1)
random_statement
})
closeEyesCount <- reactiveVal(0)
burnBodyCount <- reactiveVal(0)
currentVideo <- reactiveVal("https://www.youtube.com/embed/Rrb5ElwwSh0?autoplay=1")
observe({
# Attempt to trigger autoplay for the initial video
shinyjs::runjs("document.getElementById('videoPlayer').contentWindow.postMessage({event: 'command', func: 'mute', args: []}, '*');");
})
observeEvent(input$closeEyes, {
closeEyesCount(closeEyesCount() + 1)
if (closeEyesCount() == 3 | closeEyesCount() == 5) {
videoUrlcloseeyes <- switch(
closeEyesCount(),
"3" = "https://www.youtube.com/embed/ngcgrYjuf5U?autoplay=1",
"5" = "https://www.youtube.com/embed/ScGNAsh9DMg?autoplay=1"
)
currentVideo(videoUrlcloseeyes)
}
})
observeEvent(input$burnBody, {
burnBodyCount(burnBodyCount() + 1)
if (burnBodyCount() == 3 | burnBodyCount() == 5) {
videoUrlburnbody <- switch(
burnBodyCount(),
"3" = "https://www.youtube.com/embed/iBvlNIYJkAo?autoplay=1",
"5" = "https://www.youtube.com/embed/RfPudGbjwzTE?autoplay=1"
)
currentVideo(videoUrlburnbody)
}
})
observe({
shinyjs::runjs(paste0("document.getElementById('videoPlayer').src = '", currentVideo(), "';"))
})
choiceMessage <- reactive({
if (closeEyesCount() >= 5 | burnBodyCount() >= 5) {
return("You've made a choice. Live on with hope.")
} else {
return(NULL)
}
})
output$choiceMessage <- renderText({
choiceMessage()
})
onStop(function() {
if (!is.null(choiceMessage())) {
print(choiceMessage())
}
})
}
shinyApp(ui, server)
rsconnect::setAccountInfo(name='fangandcallan',
token='37752AEA328CDEEE09A56965AB27898E',
secret='pxkgDPueSR5+zO4OgYkloY3m2/kp3WhA2FPijIRA')
rsconnect::setAccountInfo(name='fangandcallan', token='37752AEA328CDEEE09A56965AB27898E', secret='pxkgDPueSR5+zO4OgYkloY3m2/kp3WhA2FPijIRA')
1
rsconnect::setAccountInfo(name='fangandcallan',
token='ACE7DC2B3D870C13146F1D42A4BA68CC',
secret='v8vj01hYdub7D3Pp9H5Lv+gaKHZo08XAEgU2CHre')
library(rsconnect)
deployApp()
shinyapps::diagnostics()
install.packages("shinyapps")
> rsconnect::setAccountInfo(name='fangandcallan',
rsconnect::setAccountInfo(name='fangandcallan', token='ACE7DC2B3D870C13146F1D42A4BA68CC', secret='v8vj01hYdub7D3Pp9H5Lv+gaKHZo08XAEgU2CHre')
runApp('D:/NM2207/fangandcallan.github.io/Eyes')
runApp('D:/NM2207/fangandcallan.github.io/Eyes')
runApp('D:/NM2207/fangandcallan.github.io/Eyes')
runApp('D:/NM2207/fangandcallan.github.io/Eyes')
#Death Penalty in Texas and The Last Words
#I have 2 datasets I'm planning to use, both of which are data from Texas and have offender's last words.
#1. The offenders and their victim specs.
#2. Offender's height and weight.
#Death Penalty in Texas and The Last Words
#I have 2 datasets I'm planning to use, both of which are data from Texas and have offender's last words.
#1. The offenders and their victim specs.
#2. Offender's height and weight.
runApp('D:/NM2207/fangandcallan.github.io/Eyes')
runApp('D:/NM2207/fangandcallan.github.io/Eyes')
library(readr)
merged_data <- read_csv("D:/NM2207/fangandcallan.github.io/merged_data.csv")
View(merged_data)
runApp('D:/NM2207/fangandcallan.github.io/Eyes')
runApp('D:/NM2207/fangandcallan.github.io/Eyes')
getwd()
setwd("D:/NM2207/fangandcallan.github.io")
runApp('Eyes')
getwd()
runApp('Eyes')
runApp('Eyes')
runApp('Eyes')
getwd()
setwd("D:/NM2207/fangandcallan.github.io/Eyes")
runApp()
runApp()
<iframe height="400" width="100%" frameborder="no" src="https://fangandcallan.shinyapps.io/Eyes/"> </iframe>
