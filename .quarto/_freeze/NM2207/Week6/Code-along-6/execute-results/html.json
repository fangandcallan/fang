{
  "hash": "717cad20026c80da1dfcdb12d94b092a",
  "result": {
    "markdown": "---\ntitle: \"Week-6: Code-along\"\nauthor: \"NM2207: Computational Media Literacy\"\ndate: \"2023-10-16\"\noutput:\n  html_document:\n  df_print: paged\npdf_document: default\n---\n\n\n\n\n# II. Code to edit and execute using the Code-along-6.Rmd file \n<br>\n\n## A. `for` loop\n<br>\n\n### 1. Simple `for` loop (Slide #6)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nfor (x in c(3, 6, 9)) {\nprint(x)\n}\n```\n:::\n\n<br>\n\n### 2. `for` loops structure (Slide #7)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Left-hand side code: for loop for passing values\nfor (x in 1:8) {print(x)}\n```\n:::\n\n<br>\n\n::: {.cell}\n\n```{.r .cell-code}\n# Right-hand side code: for loop for passing indices\nfor (x in 1:8)\n{y <- seq(from=100,to=200,by=5)\nprint(y[x])}\n```\n:::\n\n<br>\n\n### 3. Example: find sample means (Slide #9)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nsample_sizes <- c(5, 10, 15, 20, 25000)\nsample_means <- double(length(sample_sizes))\nfor (i in seq_along(sample_sizes)) {\nsample_means[i] <- mean(rnorm(sample_sizes[i]))\n}\nsample_means\n```\n:::\n\n<br>\n\n### 4. Alternate ways to pre-allocate space (Slide #12)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example 3 for data_type=double\nsample_means <- rep(0, length(sample_size\n```\n:::\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Initialisation of data_list\ndata_list <- vector(\"list\", length = 5)\nfor (i in 1:length(sample_sizes)) {\n}\n```\n:::\n\n<br>\n\n### 5. Review: Vectorized operations (Slide #18)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example: bad idea!\n# Vector with numbers from 7 to 11\na <- 7:11\n# Vector with numbers from 8 to 12\nb <- 8:12\n# Vector of all zeros of length 5\nout <- rep(0L, 5)\n# Loop along the length of vector a\nfor (i in seq_along(a)) {\n# Each entry of out is the sum of the corres\nout[i] <- a[i] + b[i]\n}\nout\n```\n:::\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Taking advantage of vectorization\n# Vector with numbers from 7 to 11\na <- 7:11\n# Vector with numbers from 8 to 12\nb <- 8:12\nout <- a + b\nout\n```\n:::\n\n<br>\n\n## B. Functionals\n\n### 6. `for` loops vs Functionals (Slides #23 and #24)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Slide 23\n# Initialise a vector with the size of 5 different samples\nsample_sizes <- c(5, 10, 15, 20, 25000)\n# Create a functional- function inside a function\nsample_summary <- function(sample_sizes, fun) {\n# Initialise a vector of the same size as sample_sizes\nout <- vector(\"double\", length(sample_sizes))\n# Run the for loop for as long as the length of sample_sizes\nfor (i in seq_along(sample_sizes)) {\n# Perform operations indicated fun\nout[i] <- fun(rnorm(sample_sizes[i]))\n}\nreturn(out)\n}\n23\n```\n:::\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Slide 24\n#Compute mean\nsample_summary(sample_sizes,mean)\n# Compute median\nsample_summary(sample_sizes,median)\n# Compute sd\nsample_summary(sample_sizes,sd)\n```\n:::\n\n<br>\n\n## C. `while` loop\n\n### 7. `while` loop (Slides #27)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Left-hand side code: for loop\nfor(i in 1:5){\nprint(i)\n}\n```\n:::\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Right-hand side code: while loop\ni <- 1\nwhile (i <= 5) {\n# body\nprint(i)\ni <- i + 1\n}\n```\n:::\n\n<br>\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}