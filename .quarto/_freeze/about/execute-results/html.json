{
  "hash": "10d9c7777bb49ad010699ebf0b73114c",
  "result": {
    "markdown": "---\ntitle: \"The Eyes You'll Shut Forever\"\n---\n\n\nThey are executed. But are they resting in peace?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\n\n# Shiny UI\nui <- fluidPage(\n  titlePanel(\"This is the choice between the living and the dead\"), \n  # Placed on top of the video to indicate what's it about.\n  tags$iframe(\n    src = \"https://www.youtube.com/embed/Rrb5ElwwSh0\",\n    width = \"640\",\n    height = \"360\"\n  ), # Intro to the eyes and the aim: shut the eyes\n  \n  sidebarLayout(\n    sidebarPanel(\n      h3(\"Select Eyes:\"),\n      radioButtons(\"eyeColor\", \"\",\n                   choices = c(\"Brown eyes\", \"Blue eyes\", \"Green eyes\")\n      ),\n    ), # Choosing eyes to interact with\n    mainPanel(\n      h3(\"Last Statement:\"),\n      textOutput(\"lastStatement\"),\n      br(), # Display last statement to inform user of making choices\n      actionButton(\"closeEyes\", \"Close their eyes\"),\n      actionButton(\"burnBody\", \"Condemn their body by burning them\")\n    ) # Two actional ways to shut the eyes\n  )\n)\n\n# Shiny Server\nserver <- function(input, output, session) {\n  # Read data from CSV\n  merged_data <- read.csv(\"merged_data.csv\")\n  \n  # Function to change video based on user interaction\nupdateVideo <- function(session, newSrc) {\n  session$sendCustomMessage(type = \"updateVideo\", message = list(src = newSrc))\n}\n\n  # Render last statement based on selected eye color\n  output$lastStatement <- renderText({\n    eye_color <- switch(input$eyeColor,\n      \"Brown eyes\" = \"Brown\",\n      \"Blue eyes\" = \"Blue\",\n      \"Green eyes\" = \"Green\"\n    ) # Linking variables based on eye color\n\n    if (eye_color == \"\") {\n      last_statements <- merged_data$Last.Statement[is.na(merged_data$EyeColor)]\n    } else {\n      last_statements <- merged_data$Last.Statement[merged_data$EyeColor == eye_color]\n    } # Linking last statements to eye color respectively\n\n    if (length(last_statements) == 0) {\n      return(\"This person has left no words.\")\n    } # In case there isn't a last word\n\n    random_statement <- sample(last_statements, 1)\n    random_statement\n  }) # Display a random statement based on the chosen eye\n\n  # Initialize counters for both buttons\n  closeEyesCount <- reactiveVal(0)\n  burnBodyCount <- reactiveVal(0)\n  \n  # Observe events for closing eyes button\n  observeEvent(input$closeEyes, {\n    # Increment the click count for \"Close their eyes\" button\n    closeEyesCount(closeEyesCount() + 1)\n  \n    # Check if the click count reaches 3 or 5\n    if (closeEyesCount() == 3) {\n      # Play the first video respective to \"Close their eyes\"\n      updateVideo(session, \"https://www.youtube.com/embed/RngcgrYjuf5U\")\n    } # Forgiveness is hope\n    if (closeEyesCount() == 5) {\n      # Play the second video respective to \"Close their eyes\"\n      updateVideo(session, \"https://www.youtube.com/embed/RScGNAsh9DMg\") # Hope wins death\n    }\n  })\n\n  # Observe events for burning body button\n  observeEvent(input$burnBody, {\n    # Increment the click count for \"Condemn their body by burning them\" button\n    burnBodyCount(burnBodyCount() + 1)\n\n    # Check if the click count reaches 3 or 5\n    if (burnBodyCount() == 3) {\n      # Play the first video respective to \"Condemn their body by burning them\"\n      updateVideo(session, \"https://www.youtube.com/embed/RiBvlNIYJkAo.mp4\")\n    } # Anger of fire\n    if (burnBodyCount() == 5) {\n      # Play the second video respective to \"Condemn their body by burning them\"\n      updateVideo(session, \"https://www.youtube.com/embed/RfPudGbjwzTE\")\n    } # Hate will backfire\n  })\n}\n\n# Run the Shiny app\nshinyApp(ui, server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(shinyjs)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'shinyjs' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'shinyjs'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:shiny':\n\n    runExample\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:methods':\n\n    removeClass, show\n```\n:::\n\n```{.r .cell-code}\n# Shiny UI\nui <- fluidPage(\n  useShinyjs(),  # Initialize shinyjs\n\n  titlePanel(\"This is the choice between the living and the dead\"), \n\n  # Placed on top of the video to indicate what's it about.\ndiv(id = \"video-container\", \n    tags$iframe(\n      src = \"https://www.youtube.com/embed/Rrb5ElwwSh0\",\n      width = \"640\",\n      height = \"360\"\n    )\n),\n  \n  sidebarLayout(\n    sidebarPanel(\n      h3(\"Select Eyes:\"),\n      radioButtons(\"eyeColor\", \"\",\n                   choices = c(\"Brown eyes\", \"Blue eyes\", \"Green eyes\")\n      ),\n    ), # Choosing eyes to interact with\n    \n    mainPanel(\n      h3(\"Last Statement:\"),\n      textOutput(\"lastStatement\"),\n      br(), # Display last statement to inform user of making choices\n      actionButton(\"closeEyes\", \"Close their eyes\"),\n      actionButton(\"burnBody\", \"Condemn their body by burning them\")\n    ) # Two actional ways to shut the eyes\n  )\n)\n\n# Shiny Server\nserver <- function(input, output, session) {\n  # Read data from CSV (replace with your actual data source)\n  merged_data <- read.csv(\"merged_data.csv\")\n  \n  closeEyesCount=2\n  \n  # Render last statement based on selected eye color\n  output$lastStatement <- renderText({\n    eye_color <- switch(input$eyeColor,\n      \"Brown eyes\" = \"Brown\",\n      \"Blue eyes\" = \"Blue\",\n      \"Green eyes\" = \"Green\"\n    ) # Linking variables based on eye color\n\n    if (eye_color == \"\") {\n      last_statements <- merged_data$Last.Statement[is.na(merged_data$EyeColor)]\n    } else {\n      last_statements <- merged_data$Last.Statement[merged_data$EyeColor == eye_color]\n    } # Linking last statements to eye color respectively\n\n    if (length(last_statements) == 0) {\n      return(\"This person has left no words.\")\n    } # In case there isn't a last word\n\n    random_statement <- sample(last_statements, 1)\n    random_statement\n  }) # Display a random statement based on the chosen eye\n\n  # Initialize counters for both buttons\n  \n  burnBodyCount <- reactiveVal(0)\n  \n  # Function to change video based on user interaction\n  updateVideo <- function(session, newSrc) {\n    session$sendCustomMessage(type = \"updateVideo\", message = newSrc)\n    runjs(paste0(\"shinyjs.loadYouTube('\", newSrc, \"')\"))\n  }\n\n  # Observe events for closing eyes button\n  observeEvent(input$closeEyes, {\n    # Increment the click count for \"Close their eyes\" button\n    print(closeEyesCount)\n    closeEyesCount <<- closeEyesCount + 1\n    # Check if the click count reaches 3 or 5\n    if (closeEyesCount== 3) {\n      # Play the first video respective to \"Close their eyes\"\n      print(\"hi\")\n      updateVideo(session, \"https://www.youtube.com/embed/RngcgrYjuf5U\")\n    } # Forgiveness is hope\n    if (closeEyesCount == 5) {\n      # Play the second video respective to \"Close their eyes\"\n      updateVideo(session, \"https://www.youtube.com/embed/RScGNAsh9DMg\") # Hope wins death\n    }\n  })\n\n  # Observe events for burning body button\n  observeEvent(input$burnBody, {\n    # Increment the click count for \"Condemn their body by burning them\" button\n    burnBodyCount(burnBodyCount() + 1)\n\n    # Check if the click count reaches 3 or 5\n    if (burnBodyCount() == 3) {\n      # Play the first video respective to \"Condemn their body by burning them\"\n      updateVideo(session, \"https://www.youtube.com/embed/RiBvlNIYJkAo.mp4\")\n    } # Anger of fire\n    if (burnBodyCount() == 5) {\n      # Play the second video respective to \"Condemn their body by burning them\"\n      updateVideo(session, \"https://www.youtube.com/embed/RfPudGbjwzTE\")\n    } # Hate will backfire\n  })\n}\n\n# Concluding the app\nonStop(function() {\n  print(\"You've made a choice. Live on with hope.\")\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction () \n{\n    .callbacks$remove(id)\n}\n<bytecode: 0x000002372d6832a8>\n<environment: 0x000002372c7b0d08>\n```\n:::\n\n```{.r .cell-code}\n# Run the Shiny app\nshinyApp(ui, server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}