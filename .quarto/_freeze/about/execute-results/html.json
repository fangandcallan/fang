{
  "hash": "4afd0a4344c5f1abda504301dbc82ca9",
  "result": {
    "markdown": "---\ntitle: \"The Eyes You'll Shut Forever\"\n---\n\n\nThey are executed. But are they resting in peace?\n\n\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\n\nui <- fluidPage(\n  titlePanel(\"This is the choice between the living and the dead\"), #Placed on top of the video to indicate its meaning\n  tags$video(\n    controls = \"controls\",\n    autoplay = \"autoplay\",\n    src = \"Prolouge.mp4\",\n    type = \"video/mp4\",\n    width = \"640\",\n    height = \"360\"\n  ), #Intro to the eyes and the aim: shut the eyes\n  \n  sidebarLayout(\n    sidebarPanel(\n      h3(\"Select Eyes:\"),\n      radioButtons(\"eyeColor\", \"\",\n                   choices = c(\"Brown eyes\", \"Blue eyes\", \"Green eyes\")\n      ),\n    ), #Choosing eyes to interact with\n    mainPanel(\n      h3(\"Last Statement:\"),\n      textOutput(\"lastStatement\"),\n      br(), #Display last statement to inform user of making choices\n      actionButton(\"closeEyes\", \"Close their eyes\"),\n      actionButton(\"burnBody\", \"Condemn their body by burning them\")\n    ) #Two actional ways to shut the eyes\n  )\n)\n\nserver <- function(input, output, session) {\n  merged_data <- read.csv(\"merged_data.csv\")\n  output$lastStatement <- renderText({\n    eye_color <- switch(input$eyeColor,\n      \"Brown eyes\" = \"Brown\",\n      \"Blue eyes\" = \"Blue\",\n      \"Green eyes\" = \"Green\"\n    ) #Linking variables based on eye color\n\n    if (eye_color == \"\") {\n      last_statements <- merged_data$Last.Statement[is.na(merged_data$EyeColor)]\n    } else {\n      last_statements <- merged_data$Last.Statement[merged_data$EyeColor == eye_color]\n    } # Linking last statements to eye color respectively\n\n    if (length(last_statements) == 0) {\n      return(\"This person has left no words.\")\n    } #in case there isn't a last word\n\n    random_statement <- sample(last_statements, 1)\n    random_statement\n  }) #display a random statement based on the choosen eye\n\n  # Initialize counters for both buttons\n  closeEyesCount <- reactiveVal(0)\n  burnBodyCount <- reactiveVal(0)\n\n  observeEvent(input$closeEyes, {\n    # Increment the click count for \"Close their eyes\" button\n    closeEyesCount(closeEyesCount() + 1)\n\n    # Check if the click count reaches 5\n    if (closeEyesCount() == 3) {\n      # Play the first video respective to \"Close their eyes\"\n      updateVideo(session, \"The Fight 1.mp4\")\n    } #Forgiveness is hope\n    if (closeEyesCount() == 5) {\n      # Play the second video respective to \"Close their eyes\"\n      updateVideo(session, \"At the End of the World.mp4\") #Hope wins death\n    }\n  })\n\n  observeEvent(input$burnBody, {\n    # Increment the click count for \"Condemn their body by burning them\" button\n    burnBodyCount(burnBodyCount() + 1)\n\n    # Check if the click count reaches 3\n    if (burnBodyCount() == 3) {\n      # Play the first video respective to \"Condemn their body by burning them\"\n      updateVideo(session, \"The Fight 2.mp4\")\n    } #Anger of fire\n    if (burnBodyCount() == 5) {\n      # Play the second video respective to \"Condemn their body by burning them\"\n      updateVideo(session, \"The Death.mp4\")\n    } #Hate will backfire\n  })\n}\n\nshinyApp(ui, server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n\n\nserver \\<- function(input, output, session) {\n\n=\n\n})\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\n\nui <- fluidPage(\n  titlePanel(\"This is the choice between the living and the dead\"),\n  tags$video(\n    controls = T,\n    autoplay = T,\n    src = \"Prolouge.mp4\",\n    type = \"video/mp4\",\n    width = \"640\",\n    height = \"360\"\n  )\n)\n\nserver <- function(input, output, session) {\n\n}\n\nshinyApp(ui, server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}